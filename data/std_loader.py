import json
import time
import os
import requests
import getpass

class_headers = {
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8",
    "Accept-Encoding": "gzip, deflate, br",
    "Accept-Language": "en-US,en;q=0.9,th;q=0.8",
    "Connection": "keep-alive",
    "DNT": "1",
    "Host": "webregis.ku.ac.th",
    "Referer": "https://webregis.ku.ac.th/query_cscode.php",
    "Upgrade-Insecure-Requests": "1",
    "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.67 Safari/537.36"
}

payload = {
    "Campus": "B",
    "Submit.x": "41",
    "Submit.y": "13"
}

def get_std_detail(std_id, year, semester):
    url = "https://webregis.ku.ac.th/query_course.php"
    text = ''
    form_data = {
        "qStd_id": std_id,
        "qYr": year,
        "qSm": semester
    }
    try:
        r = s.post(url, headers=class_headers, timeout=2, data=form_data)
        text = r.text
    except(SystemExit, KeyboardInterrupt):
        print("\nSystem/User exit.")
        exit()
    except:
        print("GET/POST error")
    return text

def std_cleaner(raw_page):
    pointer = 0
    list_of_class_detail = []
    wanted_list = [3 ,9, 11]
    while(raw_page.find("<tr>", pointer)!= -1):
        start = raw_page.find("<tr>", pointer)
        stop = raw_page.find("<tr>", start+1)
        #print(raw_page[start:stop])
        #if '<' not in raw_page[start:stop]:
        list_of_class_detail.append(raw_page[start:stop])
        pointer = stop
    #print_list(list_of_class_detail)
    list_of_class_detail = list_of_class_detail[4:-2]
    tmp = []
    for raw in list_of_class_detail:
        pointer = 0
        per_std = ""
        for i in range(20):
            start = raw.find(">", pointer)
            stop = raw.find("<", start+1)
            if(i in wanted_list):
                #print(raw[start+1:stop])
                per_std += raw[start+1:stop] + "_"
            pointer = stop
        tmp.append(per_std[:-1])
    list_of_class_detail = tmp


        
    #print_list(list_of_class_detail)
    return list_of_class_detail
#main()
try:
    payload["UserName"] = os.environ['KU_USER']
    payload["Password"] = os.environ['KU_PASSWORD']
except:
    payload["UserName"] = input("Username: ")
    payload["Password"] = getpass.getpass()

s = requests.Session()
s.post("https://webregis.ku.ac.th/login.php", data=payload)

res = {}
#std_list = open("std_list.txt").read().split('\n')
std_list = [6010500010, 6010500028, 6010500036, 6010500044, 6010500052, 6010500061, 6010500079, 6010500087, 6010500095, 6010500109, 6010500117, 6010500125, 6010500133, 6010500141, 6010500150, 6010500168, 6010500176, 6010500184, 6010500192, 6010500206, 6010500214, 6010500222, 6010500231, 6010500249, 6010500257, 6010500265, 6010500281, 6010500290, 6010500303, 6010500311, 6010500320, 6010500338, 6010500346, 6010500354, 6010500362, 6010500371, 6010500389, 6010500397, 6010500401, 6010500419, 6010500427, 6010500435, 6010500443, 6010500451, 6010500460, 6010500478, 6010500486, 6010500494, 6010500508, 6010500516, 6010500524, 6010500532, 6010500541, 6010500559, 6010500567, 6010500575, 6010500583, 6010500591, 6010500605, 6010500613, 6010500621, 6010500630, 6010500648, 6010500656, 6010500664, 6010500672, 6010500681, 6010500699, 6010500702, 6010500711, 6010500729, 6010500737, 6010500745, 6010500753, 6010500761, 6010500770, 6010500788, 6010500796, 6010500800, 6010500818, 6010500826, 6010500834, 6010500842, 6010500851, 6010500869, 6010500877, 6010500885, 6010500893, 6010500907, 6010500915, 6010500923, 6010500931, 6010500940, 6010500958, 6010500966, 6010500974, 6010500982, 6010500991, 6010501008, 6010501016, 6010501024, 6010501032, 6010501041, 6010501059, 6010501067, 6010501075, 6010501083, 6010501091, 6010501105, 6010501113, 6010501121, 6010501130, 6010501148, 6010501156, 6010501164, 6010501172, 6010501181, 6010501199, 6010501202, 6010501211, 6010501229, 6010501237, 6010501245, 6010501253, 6010501261, 6010501270, 6010501288, 6010501296, 6010501300, 6010501318, 6010501326, 6010501334, 6010501342, 6010501351, 6010501369, 6010501377, 6010501385, 6010501393, 6010501407, 6010501415, 6010501423, 6010501431, 6010501440, 6010501458, 6010501466, 6010501474, 6010501482, 6010501491, 6010501504, 6010501512, 6010501521, 6010501539, 6010501547, 6010501555, 6010501563, 6010501571, 6010501580, 6010501598, 6010501601, 6010501610, 6010501628, 6010501636, 6010501644, 6010501652, 6010501661, 6010501679, 6010501687, 6010501695, 6010501709, 6010501717, 6010501725, 6010501733, 6010501741, 6010501750, 6010501768, 6010501776, 6010501784, 6010501792, 6010501806, 6010501814, 6010501822, 6010501831, 6010501849, 6010501857, 6010501865, 6010501873, 6010501881, 6010501890, 6010501903, 6010501911, 6010501920, 6010501938, 6010501946, 6010501954, 6010501962, 6010501971, 6010501989, 6010501997, 6010502004, 6010502012, 6010502021, 6010502039, 6010502047, 6010502055, 6010502063, 6010502071, 6010502080, 6010502098, 6010502101, 6010502110, 6010502128, 6010502136, 6010502144, 6010502152, 6010502161, 6010502179, 6010502187, 6010502195, 6010502209, 6010502217, 6010502225, 6010502233, 6010502241, 6010502250, 6010502268, 6010502276, 6010502284, 6010502292, 6010502306, 6010502314, 6010502322, 6010502331, 6010502349, 6010502357, 6010502365, 6010502373, 6010502381, 6010502390, 6010502403, 6010502411, 6010502420, 6010502438, 6010502446, 6010502454, 6010502462, 6010502471, 6010502489, 6010502497, 6010502501, 6010502519, 6010502527, 6010502535, 6010502543, 6010502551, 6010502560, 6010502578, 6010502586, 6010502594, 6010502608, 6010502616, 6010502624, 6010502632, 6010502641, 6010502659, 6010502667, 6010502675, 6010502683, 6010502691, 6010502705, 6010502713, 6010502721, 6010502730, 6010502748, 6010502756, 6010502764, 6010502772, 6010502781, 6010502799, 6010502802, 6010502811, 6010502829, 6010502837, 6010502845, 6010502853, 6010502861, 6010502870, 6010502888, 6010502896, 6010502900, 6010502918, 6010502926, 6010502934, 6010502942, 6010502951, 6010502969, 6010502977, 6010502985, 6010502993, 6010503001, 6010503019, 6010503027, 6010503035, 6010503043, 6010503051, 6010503060, 6010503078, 6010503086, 6010503094, 6010503108, 6010503116, 6010503124, 6010503132, 6010503141, 6010503159, 6010503175, 6010503183, 6010503191, 6010503205, 6010503213, 6010503221, 6010503230, 6010503248, 6010503256, 6010503264, 6010503272, 6010503281, 6010503299, 6010503302, 6010503311, 6010503329, 6010503337, 6010503345, 6010503353, 6010503361, 6010503370, 6010503388, 6010503396, 6010503400, 6010503418, 6010503426, 6010503434, 6010503442, 6010503451, 6010503469, 6010503477, 6010503485, 6010503493, 6010503507, 6010503515, 6010503523, 6010503531, 6010503540, 6010503558, 6010503566, 6010503574, 6010503582, 6010503591, 6010503604, 6010503612, 6010503621, 6010503639, 6010503647, 6010503655, 6010503663, 6010503671, 6010503680, 6010503698, 6010503701, 6010503710, 6010503728, 6010503736, 6010503744, 6010503752, 6010503761, 6010503779, 6010503787, 6010503795, 6010503809, 6010503817, 6010503825, 6010503833, 6010503841, 6010503850, 6010503868, 6010503876, 6010503884, 6010503892, 6010503906, 6010503914, 6010503922, 6010503931, 6010503949, 6010503957, 6010503965, 6010503973, 6010503981, 6010503990, 6010504007, 6010504015, 6010504040, 6010504058, 6010504066, 6010504074, 6010504082, 6010504091, 6010504104, 6010504112, 6010504121, 6010504139, 6010504147, 6010504155, 6010504163, 6010504171, 6010504180, 6010504198, 6010504201, 6010504210, 6010504228, 6010504236, 6010504244, 6010504252, 6010504261, 6010504279, 6010504287, 6010504309, 6010504317, 6010504325, 6010504333, 6010504341, 6010504350, 6010504368, 6010504376, 6010504384, 6010504392, 6010504406, 6010504414, 6010504422, 6010504431, 6010504449, 6010504457, 6010504465, 6010504473, 6010504481, 6010504490, 6010504503, 6010504511, 6010504520, 6010504538, 6010504546, 6010504554, 6010504571, 6010504589, 6010504597, 6010504601, 6010504619, 6010504627, 6010504635, 6010504643, 6010504651, 6010504660, 6010504678, 6010504686, 6010504694, 6010504708, 6010504716, 6010504724, 6010504732, 6010504741, 6010504759, 6010504767, 6010504775, 6010504791, 6010504805, 6010504821, 6010504830, 6010504848, 6010504856, 6010504864, 6010504881, 6010504899, 6010504902, 6010504911, 6010504929, 6010504937, 6010504945, 6010504953, 6010504961, 6010504970, 6010504988, 6010504996, 6010505003, 6010505011, 6010505020, 6010505038, 6010505046, 6010505054, 6010505062, 6010505071, 6010505089, 6010505097, 6010505101, 6010505119, 6010505127, 6010505143, 6010505151, 6010505160, 6010505178, 6010505186, 6010505194, 6010505208, 6010505216, 6010505224, 6010505232, 6010505241, 6010505259, 6010505267, 6010505275, 6010505283, 6010505291, 6010505305, 6010505321, 6010505330, 6010505348, 6010505356, 6010505364, 6010505372, 6010505381, 6010505399, 6010505402, 6010505411, 6010505429, 6010505437, 6010505445, 6010505453, 6010505461, 6010505470, 6010505488, 6010505496, 6010505500, 6010505518, 6010505526, 6010505534, 6010505542, 6010505551, 6010505569, 6010505577, 6010505585, 6010505593, 6010505607, 6010505615, 6010505623, 6010505640, 6010505658, 6010505666, 6010505674, 6010505682, 6010505691, 6010505704, 6010505712, 6010505721, 6010505739, 6010505747, 6010505755, 6010505763, 6010505771, 6010505780, 6010505798, 6010505801, 6010505810, 6010505828, 6010505836, 6010505844, 6010505852, 6010505861, 6010505879, 6010505887, 6010505909, 6010505917, 6010505925, 6010505933, 6010505941, 6010505950, 6010505968, 6010505976, 6010505984, 6010505992, 6010506000, 6010506018, 6010506026, 6010506034, 6010506042, 6010506051, 6010506069, 6010506077, 6010506085, 6010506093, 6010506107, 6010506115, 6010506123, 6010506131, 6010506140, 6010506158, 6010506166, 6010506174, 6010506182, 6010506191, 6010506204, 6010506212, 6010506221, 6010506239, 6010506247, 6010506255, 6010506263, 6010506271, 6010506280, 6010506298, 6010506301, 6010506310, 6010506328, 6010506336, 6010506344, 6010506352, 6010506361, 6010506379, 6010506387, 6010506395, 6010506417, 6010506425, 6010506433, 6010506441]

for std_id in std_list:
    time.sleep(1)
    raw_std_data = get_std_detail(std_id, '61', '2')
    #print(raw_std_data)
    std_class = std_cleaner(raw_std_data)
    print(std_id, std_class)
    for i in range(len(std_class)):
        std_class[i] = std_class[i].split('_')
    res[std_id] = std_class
f = open('data.json','w')
f.write(str(json.dumps(res, indent=4, separators=(',', ': '))))
f.close()
